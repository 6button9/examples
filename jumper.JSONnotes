{"x":457,"y":90,"cols":105,"rows":50,"textColor":"green","BGcolor":"white","Id":"jumper","value":"\nlet totalPoints = 0;\nlet damage = 0;\nlet totalPipesPassed = 0;\nlet sensetivity = 50;\nlet pipeSpeed = 10;\n\nconst record = {\n  _records: [],\n  log: function() {\n     console.log(record._records)\n  },\n  record: function() {\n    if( !this._records.hasOwnProperty( arguments[0] ) ) {\n      this._records[ arguments[0] ] = [];\n    }\n    this._records[ arguments[0] ].push({\n      ts: Date.now(),\n      ...arguments,\n    });\n  },\n}\n\nclass Pipe {\n  constructor() {\n    this.screenWidth = 1000;\n    this.openings = [];\n    this.returnObject = {\n      checkCollisions: false,\n    };\n    this.createOpenings(6);\n    this.timeStamp = Date.now();\n  }\n  createOpenings(maxOpenings) {\n    const numOpenings = Math.floor(Math.random()*(maxOpenings)) + 1;\n    for(let i = 0; i < numOpenings; i++) {\n       this.openings.push(Math.floor(Math.random()*6));\n    }\n    record.record('pipes', this.openings);\n  }\n  buildPipe(menu,x){\n    for(let i = 0; i < 7; i++) {\n      if( !this.openings.includes(i) ) {\n        menu.img('./sImg/graphics/pipe_body.png', x, i*100, null, 100,100);\n      }\n      menu.text(x.toFixed(0),x,660)\n    }\n  }\n  get duration() {\n    return (Date.now() - this.timeStamp);\n  }\n  get x() {\n    // const x = this.screenWidth - (( this.duration / 2 ) % this.screenWidth) - 100;\n    const x = this.screenWidth - (( this.duration / pipeSpeed )) - 100;\n    if( x >= 10 && x <= 200) {\n      this.returnObject.checkCollisions = true;\n      this.returnObject.openings = this.openings;\n    } else {\n      this.returnObject.checkCollisions = false;\n    }\n    return x;\n  }\n  draw(menu) {\n    const x = this.x;\n    if( x < -100 ) {\n      this.returnObject.remove = true;\n      totalPipesPassed += 1;\n    } else {\n      this.buildPipe(menu, x);\n      this.returnObject.remove = false;\n    }\n    return this.returnObject;\n  }\n}\nclass Train {\n  constructor( x = 100, y = 350 ) {\n    this.x = x;\n    this.y = y;\n    this.acceleration = 0.0075;\n    this.velocity = -1;\n    this.jumpPower = 1;\n  }\n  maga() {\n    this.acceleration = 0.045;\n  }\n  fast() {\n    this.acceleration = 0.015;\n  }\n  medium() {\n    this.acceleration = 0.01;\n  }\n  slow() {\n    this.acceleration = 0.0075;\n  }\n  superJump() {\n    this.jumpPower = 3;\n  }\n  strongJump() {\n    this.jumpPower = 2;\n  }\n  normalJump() {\n    this.jumpPower = 1.5;\n  }\n  weakJump() {\n    this.jumpPower = 1.0;\n  }\n  calcY( dt ) {\n     this.y = this.y + this.velocity * dt;\n     this.velocity += this.acceleration * dt;\n     if( this.y < 0 ) {\n       if( this.velocity < -0.2 )\n         this.velocity = -0.2;\n       this.y = 0;\n     }\n     else if( this.y > 600 ) {\n       this.velocity = 0;\n       this.y = 600;\n     }\n  }\n  increaseVelocityUp( by ) {\n     this.velocity -= by;\n  }\n  jump() {\n    this.increaseVelocityUp( this.jumpPower );\n  }\n  checkCollisions(openingArray) {\n    let collision = true;\n    let offset = [];\n    let localDamage = 0;\n    damage = 0;\n    const topSpace = Math.floor(( this.y + sensetivity ) / 100);\n    const bottomSpace = Math.floor(( this.y + ( 100 - sensetivity )) / 100);\n    if( openingArray.includes(topSpace )\n      && openingArray.includes(bottomSpace) ) {\n      collision = false;\n    }\n    if( collision ) {\n      openingArray.forEach( opening => {\n        if( this.y <= ((opening * 100) - sensetivity )\n          || this.y >= ((opening * 100) + sensetivity ) ) {\n          if( this.y > ( opening * 100)) {\n            localDamage = Math.ceil(this.y - (opening * 100) - sensetivity);\n          } else {\n            localDamage = Math.ceil((opening * 100) - sensetivity - this.y);\n          }\n          offset.push(localDamage);\n          record.record('forEach:', this.y, offset);\n        }\n      })\n      damage = Math.min(...offset);\n      totalPoints += damage;\n    } \n    return collision;\n  }\n  draw(menu) {\n    this.calcY(2);\n    menu\n      .img('./sImg/graphics/train.png',this.x, this.y,null,100,100)\n  }\n\n}\nclass Loop {\n  constructor() {\n    this.isStarted = false;\n    this.interval = null;\n    this.intervalMS = 3000;\n    this.pipeInterval = null;\n    this.startTime = Date.now();\n    this.screenWidth = 1000;\n    this.menu = new MenuThis(null, 'JumpGame', 10,40);\n  }\n  start() {\n    if( !this.isStarted ){\n      document.onmousedown = () => train.jump();\n      this.startTime = Date.now();\n      this.interval = setInterval( () => this.draw(), 1000/50 );\n      this.pipeInterval = setInterval( () => drawArray.unshift(new Pipe()), this.intervalMS );\n      this.isStarted = true;\n      drawArray.unshift(new Pipe());\n    }\n  }\n  stop() {\n    document.onmousedown = null;\n    clearInterval(this.interval);\n    clearInterval(this.pipeInterval);\n    this.isStarted = false;\n  }\n  reset() {\n    totalPoints = 0;\n    totalPipesPassed = 0;\n  }\n  resetPipeInterval( interval ) {\n    this.intervalMS = interval;\n    if( this.isStarted ) { \n      clearInterval(this.pipeInterval);\n      this.pipeInterval = setInterval( () => drawArray.unshift(new Pipe()), interval );\n    }\n  }\n  get duration() {\n    return (Date.now() - this.startTime);\n  }\n  postBackground() {\n    this.menu\n      .clear()\n      .setTextSize(24)\n      .img('./sImg/graphics/background.png',0,0,null,1000,700)\n  }\n  postData() {\n    this.menu\n      .text(totalPoints.toFixed(0), 0,0)\n      .text('Y: ' + train.y.toFixed(0), 0,30)\n      .text('VEL: ' + ( - train.velocity.toFixed(2) ), 0,60)\n      .text('PIPES: ' + totalPipesPassed.toFixed(0), 0,90)\n      .text('DAMAGE: ' + damage, 0,120)\n  }\n  draw() {\n    let returnObject = {};\n    this.postBackground();\n    drawArray.forEach( fn => returnObject = fn.draw(this.menu) );\n    if( returnObject.remove )\n      drawArray.pop();\n      // drawArray.splice(0,1);\n    if( returnObject.checkCollisions ) {\n      train.checkCollisions(returnObject.openings);\n    } else {\n      damage = 0;\n    }\n    train.draw(this.menu);\n    this.postData();\n  }\n}\n\nconst train = new Train();\nconst loop = new Loop();\nvar drawArray = [];\n\nfunction main() {\n  const menu = new MenuThis(null, 'controller', 900,10)\n    .clear()\n    .text('start', 0,0, () => loop.start() )\n    .text('reset', 0,20, () => loop.reset() )\n    .text('stop', 50,0, () => loop.stop() )\n    .text('log', 50,20, () => record.log() )\n    .text('senseUP', 100,0, () => {\n        sensetivity += 5;\n        main();\n    })\n    .text('senseDN ' + sensetivity, 170,0, () => {\n        sensetivity -= 5;\n        main();\n    })    \n    .text('3000', 150,40, () => loop.resetPipeInterval(3000) )\n    .text('2000', 150,60, () => loop.resetPipeInterval(2000) )\n    .text('1500', 150,80, () => loop.resetPipeInterval(1500) )\n    .text('1000', 150,100, () => loop.resetPipeInterval(1000) )\n    .text('800', 150,120, () => loop.resetPipeInterval(800) )\n\n    .text('10', 120,40, () => pipeSpeed = 10 )\n    .text('8', 120,60, () => pipeSpeed = 8 )\n    .text('6', 120,80, () => pipeSpeed = 6 )\n    .text('4', 120,100, () => pipeSpeed = 4 )\n    .text('2', 120,120, () => {\n      pipeSpeed = 102;\n      loop.resetPipeInterval(30000);\n     })\n\n    .text('maga', 200,20, () => train.maga() )\n    .text('fast', 200,40, () => train.fast() )\n    .text('medium', 200,60, () => train.medium() )\n    .text('slow', 200,80, () => train.slow() )\n\n    .text('super', 250,40, () => train.superJump() )\n    .text('strong', 250,60, () => train.strongJump() )\n    .text('normal', 250,80, () => train.normalJump() )\n    .text('weak', 250,100, () => train.weakJump() )\n}\n\nmain();\n\n\n","noteFamily":null}