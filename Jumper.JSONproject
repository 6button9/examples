["{\"x\":\"545\",\"y\":\"78\",\"cols\":80,\"rows\":45,\"Id\":\"Record\",\"value\":\"const record = {\\n  _records: [],\\n  _last: null,\\n  log: function() {\\n     console.log(record._records)\\n  },\\n  record: function() {\\n    if( !this._records.hasOwnProperty( arguments[0] ) ) {\\n      this._records[ arguments[0] ] = [];\\n    }\\n    this._records[ arguments[0] ].push({\\n      ts: Date.now(),\\n      ...arguments,\\n    });\\n    [...this._last] = [...arguments];\\n    return this;\\n  },\\n  toConsole() {\\n    const [title, ...rest] = this._last;\\n    console.log(title, rest, Date.now());\\n  }\\n}\",\"noteFamily\":\"Main\"}","{\"x\":\"532\",\"y\":\"102\",\"cols\":90,\"rows\":45,\"Id\":\"Pipe\",\"value\":\"const fruitUrls = {\\n  _fruits: [\\n   { \\n     url: './sImg/graphics/orange_cutout.png',\\n     alias: 'orange',\\n   },\\n   { \\n     url: './sImg/graphics/apple-clipart.gif',\\n     alias: 'apple',\\n   },\\n   { \\n     url: './sImg/graphics/grapes.png',\\n     alias: 'grapes',\\n   },\\n   { \\n     url: './sImg/graphics/bananas.png',\\n     alias: 'bananas',\\n   },\\n  ],\\n  randomFruit: function() {\\n    return this._fruits[ Math.floor(Math.random() * (this._fruits.length)) ];\\n  },\\n}\\n\\n\\nclass Pipe {\\n  constructor() {\\n    this._x = game.width - 100;\\n    this.screenWidth = game.width;\\n    this.openings = [];\\n    this.fruits = [];\\n    this.createOpenings(game.openings.max);\\n  }\\n  createOpenings(maxOpenings) {\\n    const calcNewProspect = () => {\\n      const newProspect = Math.floor(Math.random()*game.rows);\\n      if( !this.openings.includes(newProspect) ) {\\n        this.openings.push(newProspect);\\n      } else {\\n        calcNewProspect();\\n      }\\n    }\\n    const numOpenings = Math.floor(Math.random()*(maxOpenings)) + 1;\\n    for(let i = 0; i < numOpenings; i++) {\\n      calcNewProspect();\\n    }\\n    this.openings.sort();\\n    for(let i = 0; i < numOpenings; i++) {\\n      this.fruits.push({url:fruitUrls.randomFruit(), index: -1});\\n    }\\n    let j = 0;\\n    for(let i = 0; i < game.rows; i++) {\\n      if( this.openings.includes(i) ) {\\n        this.fruits[j++].index = i;\\n      }\\n    }\\n    record.record('pipes', this.openings,this.fruits).toConsole();\\n  }\\n  buildPipe(menu, x){\\n    let j = 0;\\n    for(let i = 0; i < game.rows; i++) {\\n      if( !this.openings.includes(i) ) {\\n        menu.img('./sImg/graphics/pipe_body.png', x, i*100, null, 100,100);\\n      } else {\\n        if( this.fruits[j].url.url !== 'blank' ) {\\n          menu.img(this.fruits[j].url.url, x, i*100, null, 100,100);\\n        }\\n        j++;\\n      }\\n    }\\n    menu.text(x.toFixed(0), x + 25, 660)\\n  }\\n  calcPosition() {\\n    if( this._x >= ( game.train.x - 90 ) && this._x <= (game.train.x + 100)) {\\n      this.fruits = game.train.checkCollisions(this.openings, this.fruits);\\n    } else {\\n      game.damage.setCurrent(0);\\n    }\\n    this._x -= game.frameRate / game.pipes.speed;\\n    if( this._x < -100 ) {\\n      game.pipes.incPassed();\\n      game.items.pop();\\n    }\\n    //this._x -= this.dt / game.pipes.speed;  \\n  }\\n  draw(menu) {\\n    this.buildPipe(menu, this._x);\\n  }\\n}\",\"noteFamily\":\"Main\"}","{\"x\":\"532\",\"y\":\"102\",\"cols\":85,\"rows\":45,\"Id\":\"Main\",\"value\":\"//const train = new Train();\\n//const loop = new Loop();\\n//var drawArray = [];\\n\\nfunction main() {\\n  const menu = new MenuThis(null, 'controller', 180,10)\\n    .clear()\\n    .setZindex(29)\\n    .text('start', 0,0, () => game.loop.start() )\\n    .text('reset', 100,0, () => game.scores.reset() )\\n    .text('stop', 50,0, () => game.loop.stop() )\\n    .text('log', 150,0, () => record.log() )\\n\\n    .text('DW-UP', 200,0, () => {\\n        game.damage.addToSensetivity(5);\\n        main();\\n    })\\n    .text('DM-DN ' + game.damage.sensetivity, 250,0, () => {\\n        game.damage.addToSensetivity(-5);\\n        main();\\n    })\\n  \\n    .select('3000', 350,0, (e) => {\\n        game.loop.resetPipeInterval(e.target.value);\\n      },\\n      [\\n        '8000',\\n        '4000',\\n        '3000',\\n        '2000',\\n        '1500',\\n        '1000',\\n        '800',\\n        '400',\\n      ]\\n     )\\n    .select('10', 402,0, (e) => {\\n        game.pipes.setSpeed(e.target.value)\\n      },\\n      [\\n        '10',\\n        '8',\\n        '6',\\n        '4',\\n        '2',\\n        '1',\\n        '20',\\n      ]\\n     )\\n    .select('6', 440,0, (e) => {\\n        game.openings.setMax(e.target.value);\\n      },\\n      [\\n        '6',\\n        '5',\\n        '4',\\n        '3',\\n        '2',\\n        '1',\\n      ]\\n     )\\n    .select('slow', 475,0, (e) => {\\n        game.train.setAcceleration(e.target.value);\\n      },\\n      [\\n        'maga',\\n        'fast',\\n        'medium',\\n        'slow',\\n      ]\\n     )\\n    .select('weak', 545,0, (e) => {\\n        game.train.setJumpPower(e.target.value);\\n      },\\n      [\\n        'super',\\n        'strong',\\n        'normal',\\n        'weak',\\n      ]\\n     )\\n    .input('',640,0, (e) => game.setGameWidth( e.target.value ),\\n      { deleteOnInput: false }\\n    )\\n    .text('SuperSlow', 850,0, () => {\\n      game.pipes.setSpeed(102);\\n      game.loop.resetPipeInterval(30000);\\n     })\\n\\n}\\n\\nmain();\",\"noteFamily\":\"Main\"}","{\"x\":\"532\",\"y\":\"102\",\"cols\":105,\"rows\":45,\"Id\":\"Train\",\"value\":\"class Train {\\n  constructor() {\\n    this.x = 100;\\n    this.y = 350;\\n    this.height = 100;\\n    this.acceleration = 0.0075;\\n    this.velocity = -1;\\n    this.jumpPower = 1;\\n  }\\n  setAcceleration(newAcc) {\\n    console.log(typeof newAcc, newAcc);\\n    if( typeof newAcc === 'string' ) {\\n      switch( newAcc ) {\\n        case 'maga':\\n          this.acceleration = 0.045;\\n          break;\\n        case 'fast':\\n          this.acceleration = 0.015;\\n          break;\\n        case 'medium':\\n          this.acceleration = 0.01;\\n          break;\\n        case 'slow':\\n          this.acceleration = 0.0075;\\n          break;\\n        default:\\n          this.acceleration = 0.0075;\\n          break;\\n  \\n      }\\n    } else if ( typeof newAcc === 'number' ){\\n      this.accelateration = newAcc;\\n    }\\n    record.record('train_setAccelertion', this.acceleration );\\n  }\\n  setJumpPower(newJumpPower) {\\n    console.log(typeof newJumpPower, newJumpPower);\\n    if( typeof newJumpPower === 'string' ) {\\n      switch( newJumpPower ) {\\n        case 'super':\\n          this.jumpPower = 3;\\n          break;\\n        case 'strong':\\n          this.jumpPower = 2;\\n          break;\\n        case 'normal':\\n          this.jumpPower = 1.5;\\n          break;\\n        case 'weak':\\n          this.jumpPower = 1;\\n          break;\\n        default:\\n          this.jumpPower = 1;\\n          break;\\n  \\n      }\\n    } else if ( typeof newAcc === 'number' ){\\n      this.jumpPower = newJumpPower;\\n    }\\n    record.record('train_setJumpPower', this.jumpPower );\\n  }\\n  calcPosition( dt = 2) {\\n     this.y = this.y + this.velocity * dt;\\n     this.velocity += this.acceleration * dt;\\n     if( this.y < 0 ) {\\n       if( this.velocity < -0.2 )\\n         this.velocity = -0.2;\\n       this.y = 0;\\n     }\\n     else if( this.y > ( game.height - 100) ) {\\n       this.velocity = 0;\\n       this.y = game.height - 100;\\n     }\\n  }\\n  increaseVelocityUp( by ) {\\n     this.velocity -= by;\\n  }\\n  jump() {\\n    this.increaseVelocityUp( this.jumpPower );\\n    record.record('train_jump',this.jumpPower);\\n  }\\n  moveBy(x = 0,y = 0) {\\n    this.x +=x;\\n    this.y +=y;\\n  }\\n  checkCollisions(openingArray, fruits) {\\n    let collision = true;\\n    let offset = [];\\n    let localDamage = 0;\\n    game.damage.setCurrent(0);\\n    const topSpace = Math.floor(( this.y + game.damage.sensetivity ) / 100);\\n    const bottomSpace = Math.floor(( this.y + ( 100 - game.damage.sensetivity )) / 100);\\n    if( openingArray.includes(topSpace )\\n      && openingArray.includes(bottomSpace) ) {\\n      collision = false;\\n    }\\n    const returnFruits = fruits.map( (fruit) => {\\n     if( fruit.index === topSpace){\\n       if( fruit.url.url !== 'blank') {\\n          game.hits.addUrl({\\n            alias: fruit.url.alias,\\n            url: fruit.url.url,\\n          })\\n       }\\n       return {\\n         url:{\\n           url: 'blank',\\n           alias: 'blank',\\n         },\\n         index: fruit.index,\\n       };\\n     } else if( fruit.index === bottomSpace){\\n       if( fruit.url.url !== 'blank') {\\n          game.hits.addUrl({\\n            alias: fruit.url.alias,\\n            url: fruit.url.url,\\n          })\\n       }\\n       return {\\n         url:{\\n           url: 'blank',\\n           alias: 'blank',\\n         },\\n         index: fruit.index,\\n       };\\n     } else {\\n       return fruit;\\n     }                              \\n    });\\n    if( collision ) {\\n      openingArray.forEach( opening => {\\n        if( this.y <= ((opening * 100) - game.damage.sensetivity )\\n          || this.y >= ((opening * 100) + game.damage.sensetivity ) ) {\\n          if( this.y > ( opening * 100)) {\\n            localDamage = Math.ceil(this.y - (opening * 100) - game.damage.sensetivity);\\n          } else {\\n            localDamage = Math.ceil((opening * 100) - game.damage.sensetivity - this.y);\\n          }\\n          offset.push(localDamage);\\n          record.record('train_checkCollisions_forEach', { y: this.y }, offset);\\n        }\\n      })\\n      game.damage.setCurrent(Math.min(...offset));\\n      game.damage.addToTotal(game.damage.current);\\n    }\\n    return returnFruits;\\n  }\\n  draw(menu) {\\n    menu\\n      .img('./sImg/graphics/train.png',this.x, this.y,null,100,100)\\n  }\\n\\n}\",\"noteFamily\":\"Main\"}","{\"x\":\"532\",\"y\":\"102\",\"cols\":62,\"rows\":20,\"Id\":\"Run\",\"value\":\"const clearAllIntervals = () => {\\n  for(let i = 0; i < 100000; i++) {\\n    clearInterval(i);\\n    clearTimeout(i);\\n    cancelAnimationFrame(i);\\n  }\\n}\\n\\n\\nnew MenuThis(null, 'Run', 0,0)\\n  .clear()\\n  .setZindex(29)\\n  .text('jumper',0,0, () => {\\n    run.jsMany([\\n      'Record',\\n      'Pipe',\\n      'Train',\\n      'Loop',\\n      'Game',\\n      'Main',\\n    ]);\\n    clearAllIntervals();\\n   }\\n )\",\"noteFamily\":\"Main\"}","{\"x\":\"532\",\"y\":\"102\",\"cols\":115,\"rows\":48,\"Id\":\"Loop\",\"value\":\"class Loop {\\n  constructor() {\\n    this.isStarted = false;\\n    this.firstPipe = true;\\n    this.animationFrame = null,\\n    this.interval = null;\\n    this.pipeInterval = null;\\n    this.pipesIntervalMS = 3000;\\n    this.startTime = Date.now();\\n    this.stopTime = null;\\n    this.holdTime = 0;\\n    this.holdTimeout = null;\\n    this.screenWidth = 100;\\n    this.pipes = 0;\\n    this.menu = new MenuThis(null, 'JumpGame', 1,1);\\n  }\\n  static init() {\\n    const newLoop = new Loop();\\n    return newLoop;\\n    newLoop.screenWidth = game.width;\\n  }\\n  start() {\\n    const startPipe = () => {\\n      game.items.unshift(new Pipe());\\n      this.pipeInterval = setInterval( () => \\n        game.items.unshift(new Pipe())\\n      , this.pipesIntervalMS );\\n      record.record('loop_startPipe', \\n        { pipe: this.pipes++ }, \\n      ).toConsole();\\n    }\\n    if( !this.isStarted ){\\n      document.onkeydown = (e) => {\\n        console.log(e)\\n        switch( e.key ) {\\n          case 'w' :\\n          case 'W' :\\n            game.train.moveBy(0,-50);\\n            game.train.velocity = - game.train.jumpPower / 3;\\n            break;\\n          case 'a' :\\n          case 'A' :\\n            game.train.moveBy(-25,0);\\n            break;\\n          case 'd' :\\n          case 'D' :\\n            game.train.moveBy(25,0);\\n            break;\\n          case 'x' :\\n          case 'X' :\\n            game.train.moveBy(0,25);\\n            break;\\n          default:\\n            game.train.jump();\\n            break;\\n        }\\n      }\\n      document.onmousedown = () => game.train.jump();\\n      if( this.firstPipe ) {\\n        this.firstPipe = false;\\n        startPipe();\\n      } else {\\n        this.holdTimeout = setTimeout( () => {\\n          if( this.isStarted ) {\\n            startPipe();\\n          }\\n          record.record('loop_startPipe_notFirst',\\n           { pipe: this.pipes }, \\n           { holdTimeout: this.holdTime }\\n          ).toConsole();\\n        }, this.holdTime);\\n        record.record('loop_start_notFirst',\\n          { pipe: this.pipes }, \\n          { holdTime: this.holdTime }, \\n          { holdTimeout: this.holdTimeout }\\n        ).toConsole();\\n      }\\n      this.startTime = Date.now();\\n      this.interval = setInterval( () => this.calcPositions(), game.frameRate );\\n      //this.animationFrame = requestAnimationFrame( () => this.draw() ); //, game.frameRate );\\n      this.isStarted = true;\\n    }\\n  }\\n  stop() {\\n    this.isStarted = false;\\n    document.onkeydown = null;\\n    document.onmousedown = null;\\n    clearTimeout(this.holdTimeout);\\n    clearInterval(this.interval);\\n    cancelAnimationFrame(this.animationFrame);\\n    clearInterval(this.pipeInterval);\\n    this.stopTime = Date.now();\\n    const runTime = this.stopTime - this.startTime;\\n    if(  runTime < this.holdTime ) {\\n      this.holdTime -= runTime;\\n    } else {\\n       this.holdTime = this.pipesIntervalMS - ( ( (runTime) % this.pipesIntervalMS ) );\\n    }\\n    record.record('loop_stop_holdTime', \\n          { pipe: this.pipes }, \\n          { holdTime: this.holdTime }, \\n          { runTime_: runTime },\\n          { startTime: this.startTime },\\n          { stopTime_: this.stopTime }\\n        ).toConsole();\\n    return;\\n  }\\n  resetPipeInterval( interval ) {\\n    this.pipesIntervalMS = Number(interval);\\n    if( this.isStarted ) { \\n      clearInterval(this.pipeInterval);\\n      this.pipeInterval = setInterval( () => game.items.unshift(new Pipe(game)), interval );\\n    }\\n    record.record('loop_resetPipeInterval:',this.pipesIntervalMS).toConsole();\\n  }\\n  get duration() {\\n    return (Date.now() - this.startTime);\\n  }\\n  postBackground() {\\n    this.menu\\n      .clear()\\n      .setTextSize(24)\\n      .img('./sImg/graphics/background.png',0,0,null,game.width,game.height)\\n  }\\n  postData() {\\n    this.menu\\n      .text(game.damage.total.toFixed(0), 0,20)\\n      .text('Y: ' + (game.height - game.train.y - game.train.height).toFixed(0), 0,50)\\n      .text('VEL: ' + ( - game.train.velocity.toFixed(2) ), 0,80)\\n      .text('PIPES: ' + game.pipes.passed, 0,110)\\n      .text('DAMAGE: ' + game.damage.current, 0,140)\\n  }\\n  calcPositions() {\\n    game.items.forEach( item => item.calcPosition() );\\n    game.train.calcPosition();\\n    this.draw();\\n  }\\n  draw() {\\n    this.postBackground();\\n    game.items.forEach( item => item.draw(this.menu) );\\n    game.train.draw(this.menu);\\n    this.postData();\\n    //this.animationFrame = requestAnimationFrame( () => this.draw() );\\n  }\\n}\\n\",\"noteFamily\":\"Main\"}","{\"x\":\"532\",\"y\":\"102\",\"cols\":110,\"rows\":41,\"Id\":\"Game\",\"value\":\"var game = {\\n  frameRate: 1000/60,\\n  height: 700,\\n  width: 1000,\\n  setGameWidth: function(newWidth) {\\n    if( Number(newWidth) ) {\\n      game.width = Number(newWidth);\\n    }\\n  },\\n  loop: Loop.init(),\\n  train: new Train(),\\n  items: [],\\n  hits: {\\n    hits: {},\\n    addUrl: (url) => {\\n       console.log(url);\\n       if( game.hits.hits.hasOwnProperty(url.alias) ) {\\n          game.hits.hits[url.alias].hits = game.hits.hits[url.alias].hits + 1;\\n       } else {\\n          game.hits.hits[url.alias] = {};\\n          game.hits.hits[url.alias].hits = 1;\\n          game.hits.hits[url.alias].alias = url.alias;\\n          game.hits.hits[url.alias].url = url.url\\n       }\\n       record.record('game_hits', game.hits).toConsole();\\n       game.hits.post();\\n    },\\n    post: function() {\\n      const postMenu =new MenuThis(null, 'hitsMenu', 10, 200)\\n        .clear()\\n        .setTextSize(24)\\n        .setZindex(29);\\n      let y = -60;\\n      for(const key in game.hits.hits) {\\n        y += 60;\\n        postMenu\\n          .img(game.hits.hits[key].url, 0, y, null, 50,50) \\n          .text(game.hits.hits[key].hits, 60, y + 10,null)\\n      }\\n    },\\n\\n  },\\n  scores: {\\n    reset: function() {\\n      game.damage.total = 0;\\n      game.pipes.passed = 0;\\n      game.items = [];\\n      game.loop.draw();\\n    },\\n  },\\n  damage: {\\n    sensetivity: 50,\\n    addToSensetivity: function(by) {\\n      game.damage.sensetivity += by;\\n    },\\n    current: 0,\\n    setCurrent: function(newDamage) {\\n      game.damage.current = newDamage;\\n    },\\n    total: 0,\\n    addToTotal: function(newDamage) {\\n      game.damage.total += newDamage;\\n      record.record('game_damage_addToTotal',game.damage.total, newDamage);\\n    },\\n  },\\n  pipes: {\\n    speed: 10,\\n    setSpeed: function(newSpeed) {\\n      game.pipes.speed = Number(newSpeed);\\n      record.record('game_setSpeed', game.pipes.speed);\\n    },\\n    passed: 0,\\n    incPassed: function() {\\n      game.pipes.passed++;\\n      record.record('game_pipes_passed', game.pipes.passed);\\n    }\\n  },\\n  openings: {\\n    max: 6,\\n    setMax: function(newMax) {\\n      game.openings.max = Number(newMax);\\n      record.record('game_openings_setMax', game.openings.max);\\n    }\\n  },\\n  rows: 7,\\n};\",\"noteFamily\":\"Main\"}"]